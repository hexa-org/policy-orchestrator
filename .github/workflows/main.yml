name: build
on: push
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: postgresql
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.18'
      - name: psql
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client
      - name: create
        run: |
          psql -v on_error_stop=1 --host localhost --username postgresql <<-EOSQL
            create database orchestrator_test;
            create user orchestrator with password 'orchestrator';
            grant all privileges on database orchestrator_test to orchestrator;
          EOSQL
        env:
          PGPASSWORD: postgresql
      - name: golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.12.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate.linux-amd64 /usr/bin/migrate
      - name: migrate
        run: |
          migrate -verbose -path ./databases/orchestrator -database postgres://orchestrator:orchestrator@localhost:5432/orchestrator_test?sslmode=disable up
      - name: opa
        run: |
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.38.1/opa_linux_amd64
          chmod 755 opa
          sudo mv opa /usr/bin/opa
      - name: test
        run: |
          go test -tags integration -coverprofile coverage.out  ./.../
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
  amazon-container:
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.HEXA_DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.HEXA_DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: login to amazon ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: pack
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          sudo add-apt-repository ppa:cncf-buildpacks/pack-cli
          sudo apt-get update
          sudo apt-get install -y pack-cli
          pack build --builder heroku/buildpacks:20 --publish $ECR_REGISTRY/hexa-demo/hexa:${{ github.sha }}
      - name: docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd deployments/opa-server
          docker build -t $ECR_REGISTRY/hexa-demo/hexa-opa-server:${{ github.sha }} .
          docker push $ECR_REGISTRY/hexa-demo/hexa-opa-server:${{ github.sha }}

  google-container:
    runs-on: ubuntu-latest
    needs: [ test ]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - name: 'authenticate to google cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.HEXA_DEMO_GOOGLE_CREDENTIALS }}'
      - name: 'set up cloud sdk'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: 'build and store hexa demo image'
        run: |-
          gcloud builds submit --pack image=gcr.io/hexa-orchestration/hexa-demos:${{ github.sha }},builder=heroku/buildpacks:20
          gcloud container images add-tag gcr.io/hexa-orchestration/hexa-demos:${{ github.sha }} gcr.io/hexa-orchestration/hexa-demos:latest
      - name: 'build opa for gcloud'
        run: |-
          cd deployments/opa-server
          gcloud builds submit --tag gcr.io/hexa-orchestration/opa:${{ github.sha }}
          gcloud container images add-tag gcr.io/hexa-orchestration/opa:${{ github.sha }} gcr.io/hexa-orchestration/opa:latest
  google-deploy-hexa-demos:
    runs-on: ubuntu-latest
    needs: [ google-container ]
    steps:
      - uses: actions/checkout@v3
      - name: 'authenticate to google cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.HEXA_DEMO_GOOGLE_CREDENTIALS }}'
      - name: 'set up cloud sdk'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: 'deploy hexa-demo to cloud run'
        run: |-
          gcloud run deploy hexa-demo --image gcr.io/hexa-orchestration/hexa-demos:${{ github.sha }} --region us-central1 --platform managed --command=demo
  google-deploy-opa:
    runs-on: ubuntu-latest
    needs: [ google-container ]
    steps:
      - uses: actions/checkout@v3
      - name: 'authenticate to google cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.HEXA_DEMO_GOOGLE_CREDENTIALS }}'
      - name: 'set up cloud sdk'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: 'deploy opa to cloud run'
        run: |-
          gcloud run deploy opa --image gcr.io/hexa-orchestration/opa:${{ github.sha }} --region us-central1 --platform managed

  azure-container:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - uses: azure/docker-login@v1
        with:
          login-server: azurehexa.azurecr.io
          username: ${{ secrets.HEXA_DEMO_AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.HEXA_DEMO_AZURE_REGISTRY_PASSWORD }}
      - name: pack
        run: |
          sudo add-apt-repository ppa:cncf-buildpacks/pack-cli
          sudo apt-get update
          sudo apt-get install -y pack-cli
          pack build --builder heroku/buildpacks:20 --publish ${{ secrets.HEXA_DEMO_AZURE_REPOSITORY_URI }}:${{ github.sha }}
  azure-deploy-hexa-demo:
      runs-on: ubuntu-latest
      needs: [azure-container]
      steps:
        - name: 'login via azure cli'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.HEXA_DEMO_AZURE_CREDENTIALS }}
        - uses: azure/webapps-deploy@v2
          with:
            app-name: 'azurehexa'
            images: 'azurehexa.azurecr.io/hexa:${{ github.sha }}'
  azure-deploy-hexa-demo-config:
    runs-on: ubuntu-latest
    needs: [azure-container]
    steps:
      - name: 'login via azure cli'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.HEXA_DEMO_CONFIG_AZURE_CREDENTIALS }}
      - uses: azure/webapps-deploy@v2
        with:
          app-name: 'azurehexa-config'
          images: 'azurehexa.azurecr.io/hexa:${{ github.sha }}'
